{"version":3,"sources":["Ball.js","Lottery.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Ball","react_default","a","createElement","className","this","props","num","Component","Lottery","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","nums","Array","from","length","numBalls","handleClick","bind","assertThisInitialized","_this2","setState","curState","map","n","Math","floor","random","maxNum","generate","title","src_Ball_0","onClick","defaultProps","Footer","role","aria-label","App","src_Lottery_0","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTASeA,0LAJb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBC,KAAKC,MAAMC,YAFxCC,cCCbC,qBAML,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMC,KACDU,MAAQ,CAAEC,KAAMC,MAAMC,KAAK,CAAEC,OAAQV,EAAKJ,MAAMe,YACrDX,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IAHDA,0EAKR,IAAAe,EAAApB,KACVA,KAAKqB,SAAS,SAAAC,GAAQ,MAAK,CAC1BV,KAAMU,EAASV,KAAKW,IACnB,SAAAC,GAAC,OAAIC,KAAKC,MAAMD,KAAKE,SAAWP,EAAKnB,MAAM2B,QAAU,6CAKvD5B,KAAK6B,4CAGL,OACCjC,EAAAC,EAAAC,cAAA,WAASC,UAAU,WAClBH,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAM6B,OAChBlC,EAAAC,EAAAC,cAAA,WACEE,KAAKW,MAAMC,KAAKW,IAAI,SAAAC,GAAC,OACrB5B,EAAAC,EAAAC,cAACiC,EAAD,CAAM7B,IAAKsB,OAGb5B,EAAAC,EAAAC,cAAA,UAAQkC,QAAShC,KAAKiB,aAAtB,0BA9BkBd,cAAhBC,EACE6B,aAAe,CACrBH,MAAO,QACPd,SAAU,EACVY,OAAQ,IAgCKxB,QC1BA8B,mLAVb,OACCtC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,uBACWF,EAAAC,EAAAC,cAAA,QAAMqC,KAAK,MAAMC,aAAW,eAA5B,8BADX,uBAJiBjC,aCoBNkC,mLAfZ,OACDzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwC,EAAD,CAASR,MAAM,cAAcF,OAAQ,GAAIZ,SAAU,IACnDpB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACyC,EAAD,cAVgBpC,aCOEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f74742c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Ball.css';\n\nclass Ball extends Component {\n\trender() {\n\t\treturn <div className=\"Ball animated bounce\">{this.props.num}</div>;\n\t}\n}\n\nexport default Ball;\n","import React, { Component } from 'react';\nimport Ball from './Ball';\nimport './Lottery.css';\n\nclass Lottery extends Component {\n\tstatic defaultProps = {\n\t\ttitle: 'Lotto',\n\t\tnumBalls: 6,\n\t\tmaxNum: 49\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { nums: Array.from({ length: this.props.numBalls }) };\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\tgenerate() {\n\t\tthis.setState(curState => ({\n\t\t\tnums: curState.nums.map(\n\t\t\t\tn => Math.floor(Math.random() * this.props.maxNum) + 1\n\t\t\t)\n\t\t}));\n\t}\n\thandleClick() {\n\t\tthis.generate();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<section className=\"Lottery\">\n\t\t\t\t<h1>{this.props.title}</h1>\n\t\t\t\t<div>\n\t\t\t\t\t{this.state.nums.map(n => (\n\t\t\t\t\t\t<Ball num={n} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<button onClick={this.handleClick}>Generate Balls</button>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default Lottery;\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h4>\n\t\t\t\t\tMade With <span role='img' aria-label=\"heart-emoji\"> ️️❤️ </span>using React\n\t\t\t\t</h4>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Footer;","import React, { Component } from 'react'\nimport './App.css';\nimport Lottery from './Lottery';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n\t  return (\n\t\t<div className=\"App\">\n\t\t<h1>Lotto Number Generator</h1>\n\t\t<Lottery />\n\t\t<p>Numbers: 0 - 49</p>\n\t\t<hr/>\n\t\t<Lottery title='Bonus Balls' maxNum={10} numBalls={2} />\n\t\t<p>Numbers 1 - 10</p>\n\t\t<Footer />\n\t\t</div>\n\t\t\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}